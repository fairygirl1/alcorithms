# обход в ширину используется для нахождения кратчайшего пути в 
# невзвешенном графе


#deque - дек - двусторонняя очередь, добавлять и 
# удалять элементы можно с обеих сторон

from collections import deque

def bfs(graph, start):
    visited = set()  # Множество для отслеживания посещенных вершин
    queue = deque()  # Очередь для обхода вершин

    queue.append(start)  # Добавляем начальную вершину в очередь
    visited.add(start)  # Отмечаем начальную вершину как посещенную

    while queue:
        vertex = queue.popleft()  # Извлекаем вершину из очереди
        print(vertex)  # Обрабатываем вершину (в данном случае просто выводим ее)

        # Перебираем соседние вершины, которые еще не были посещены
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)  # Добавляем соседнюю вершину в очередь
                visited.add(neighbor)  # Отмечаем соседнюю вершину как посещенную

# Пример графа в виде словаря смежности
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

# Запуск обхода в ширину с вершины 'A'
bfs(graph, 'A')
